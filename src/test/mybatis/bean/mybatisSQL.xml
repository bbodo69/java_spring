<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="myba">
  
  	<select id="selectIf" parameterType="String" resultType="int">
  		select count(*) from test
  		<if test="value != null">
  		 where id=#{value}
  		</if>	
  	</select>
  
  	<!-- 로그인 체크 -->
  	<select id="selectIf2" parameterType="TestDTO" resultType="int">
  		select count(*) from test where id = #{id}  		
  		<if test="pw != null">
  			and pw = #{pw}
  		</if>
  	</select>
  	
 	<!-- else if, else -->
  	<select id="choose" parameterType="testDTO" resultType="int">
  		select count(*) from test where id=#{id}
  		<choose>
  			<when test="pw !=null">
  				and pw=#{pw}
  			</when>
  			<when test="age != null">
  				and age=#{age}
  			</when>
  			<otherwise>
  				and reg=#{reg}
  			</otherwise>
  		</choose>
  	</select>

	<!-- select count(*) from test where id=#{id} and pw=#{pw} -->
	<select id="selectTrim" parameterType="testDTO" resultType="int">
		select count(*) from test
		<trim prefix="where" prefixOverrides="and">
			<if test="id != null">
				id=#{id}
			</if>
			<if test="pw != null">
				pw=#{pw}
			</if> 
		</trim>
	</select>
	
	<update id="updateTest" parameterType="testDTO">
		update test
			<trim prefix="set" prefixOverrides=",">
				<if test="pw != null">
					pw = #{pw}
				</if>
				<if test="age != null">
					age = #{age}
				</if>		
			</trim>
	</update>
	
	<update id="updateTest2" parameterType="testDTO">
		update test
			<trim prefix="set" suffixOverrides=",">
				<if test="pw != null">
					pw = #{pw},
				</if>
				<if test="age != null">
					age = #{age},
				</if>		
			</trim>
	</update>	
  	
  	<!-- foreach 이용해서 컬렉션 같은 반복으로 처리해야할 구문에 사용 
  		select * from test where id in (?, ?, ?);
  		select * from test where id in (#item[0], #item[1], #item[2]);
  		item = list요소를 대신할 별칭(반복할때마다 순서대로 요소가 담기는 변수)
  	-->
  
  	<select id = "selectIn" parameterType="list" resultType="int">
  		select count(*) from test where id in
  		<!-- parameter 값과 collection 값을 일치시켜주면 된다. -->
  		<foreach collection="list" item="item" open="(" close=")" separator=",">
  			#{item}
  		</foreach>
  	</select>
  
  	<!--  select * from test where"+sel+" like '%'+keyword+"'%" -->
  	<select id="selectLike" parameterType="hashmap" resultType="int">
  		select count(*) from test where ${sel} like '%'|| #{keyword} ||'%'   	
  	</select>
  
  	<!-- selectKey
  		insert, update, delete에 사용. 쿼리를 이중으로 실행시켜 결과를 적용하거나
  		돌려주게 해주는 역할
  	 -->
  	 <update id="updateKey" parameterType="testDTO">
  	 <!-- age에 count(*) 만큼의 값이 들어간다 -->
  	 	<selectKey keyProperty="age" resultType="int" order="BEFORE">
  	 		select count(*) from test 
  	 	</selectKey>
  	 	update test set pw=#{pw}, age=#{age} where id=#{id}
  	 </update>
  	 
  	 <!-- 
  	 	테이블의 id값은 test_seq 로 자동으로 올라간다 .
  	 	매핑하고 싶은 컬럼 즉, id를 ketProperty 로 설정하면 보내준 dto에 지동 매핑.
  	 	자바에서 이쿼리문 호출후, dto.getId()로 매핑된 값 꺼내볼 수 있다.
  	  -->  	 
  	 <insert id="insertKey" parameterType="testDTO">
  	 	insert into test values(test_seq.nextVal, #{pw}, #{age}, sysdate)
  	 	<selectKey keyProperty="id" resultType="int" order="AFTER">
  	 		select test_seq.currval from dual
  	 	</selectKey>
  	 </insert>
  
  
  
  
  </mapper>